import { Patient } from './patient.entity';
import { User } from './user.entity';
export declare class CDSRule {
    id: string;
    ruleName: string;
    ruleCode: string;
    ruleType: string;
    category: string;
    description: string;
    conditions: any;
    actions: any;
    severity: string;
    priority: number;
    triggers: any;
    targetUsers: string[];
    targetPatientCriteria: any;
    message: string;
    recommendation: string;
    resources: any[];
    references: any[];
    isActive: boolean;
    canOverride: boolean;
    effectiveDate: Date;
    expirationDate: Date;
    version: string;
    previousVersionId: string;
    evidenceLevel: string;
    evidenceSource: string;
    clinicalEvidence: string;
    timesTriggered: number;
    timesAccepted: number;
    timesOverridden: number;
    createdAt: Date;
    updatedAt: Date;
    createdBy: string;
    lastModifiedBy: string;
    alerts: CDSAlert[];
}
export declare class CDSAlert {
    id: string;
    ruleId: string;
    patientId: string;
    providerId: string;
    encounterId: string;
    alertDate: Date;
    alertType: string;
    severity: string;
    message: string;
    recommendation: string;
    triggerData: any;
    patientData: any;
    status: string;
    acknowledgedDate: Date;
    acknowledgedBy: string;
    overrideReason: string;
    notes: string;
    createdAt: Date;
    updatedAt: Date;
    rule: CDSRule;
    patient: Patient;
    provider: User;
    acknowledgedByUser: User;
}
export declare class QualityMeasure {
    id: string;
    measureCode: string;
    measureName: string;
    measureSet: string;
    nqfNumber: string;
    cmsNumber: string;
    description: string;
    rationale: string;
    clinicalRecommendation: string;
    measureType: string;
    domain: string;
    specialty: string;
    initialPopulation: any;
    denominator: any;
    denominatorExclusions: any;
    numerator: any;
    numeratorExclusions: any;
    scoringMethod: string;
    targetValue: number;
    higherScoreBetter: boolean;
    reportingPeriod: string;
    requiresReporting: boolean;
    reportingPrograms: string[];
    isActive: boolean;
    effectiveDate: Date;
    endDate: Date;
    version: string;
    lastReviewDate: Date;
    createdAt: Date;
    updatedAt: Date;
    results: QualityMeasureResult[];
}
export declare class QualityMeasureResult {
    id: string;
    measureId: string;
    patientId: string;
    providerId: string;
    measurementPeriod: Date;
    calculationDate: Date;
    meetsNumerator: boolean;
    meetsDenominator: boolean;
    hasExclusion: boolean;
    hasException: boolean;
    value: number;
    unit: string;
    calculationDetails: any;
    exclusionReason: string;
    exceptionReason: string;
    status: string;
    notes: string;
    createdAt: Date;
    measure: QualityMeasure;
    patient: Patient;
    provider: User;
}
export declare class ClinicalGuideline {
    id: string;
    guidelineCode: string;
    title: string;
    version: string;
    organization: string;
    specialty: string;
    condition: string;
    category: string;
    description: string;
    purpose: string;
    recommendations: any[];
    evidenceSummary: any;
    targetPopulation: any;
    inclusionCriteria: any;
    exclusionCriteria: any;
    evidenceLevel: string;
    strengthOfRecommendation: string;
    references: any[];
    publicationDate: Date;
    lastReviewDate: Date;
    nextReviewDate: Date;
    expirationDate: Date;
    isActive: boolean;
    isRetired: boolean;
    timesAccessed: number;
    createdAt: Date;
    updatedAt: Date;
}
export declare class PreventiveCareReminder {
    id: string;
    patientId: string;
    providerId: string;
    reminderType: string;
    serviceName: string;
    serviceCode: string;
    description: string;
    dueDate: Date;
    lastPerformed: Date;
    nextDue: Date;
    frequency: string;
    priority: string;
    isOverdue: boolean;
    status: string;
    completedDate: Date;
    completedBy: string;
    dismissalReason: string;
    guidelineSource: string;
    evidenceLevel: string;
    clinicalRationale: string;
    createdAt: Date;
    updatedAt: Date;
    patient: Patient;
    provider: User;
    completedByUser: User;
}
