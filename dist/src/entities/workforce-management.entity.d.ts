import { User, Facility } from './facility-provider.entity';
export declare class EmployeeProfile {
    id: number;
    uuid: string;
    employee_id: number;
    employee_number: string;
    department_id: number;
    position_id: number;
    employment_status: string;
    employment_type: string;
    hire_date: Date;
    termination_date: Date;
    termination_reason: string;
    supervisor_id: number;
    base_salary: number;
    hourly_rate: number;
    pay_frequency: string;
    standard_hours_per_week: number;
    shift_preference: string;
    skills_certifications: string;
    emergency_contact: string;
    work_email: string;
    work_phone: string;
    badge_number: string;
    background_check_date: Date;
    background_check_status: string;
    drug_screen_date: Date;
    drug_screen_status: string;
    is_active: number;
    created_at: Date;
    updated_at: Date;
    employee: User;
    department: Department;
    position: Position;
    supervisor: User;
    schedule_assignments: ScheduleAssignment[];
    time_entries: TimeEntry[];
    credentials: CredentialTracking[];
}
export declare class Department {
    id: number;
    uuid: string;
    department_code: string;
    department_name: string;
    department_description: string;
    facility_id: number;
    parent_department_id: number;
    department_head_id: number;
    cost_center: string;
    annual_budget: number;
    authorized_positions: number;
    location: string;
    phone_number: string;
    email: string;
    is_active: number;
    created_at: Date;
    updated_at: Date;
    facility: Facility;
    parent_department: Department;
    department_head: User;
    sub_departments: Department[];
    positions: Position[];
    employee_profiles: EmployeeProfile[];
}
export declare class Position {
    id: number;
    uuid: string;
    position_code: string;
    position_title: string;
    position_description: string;
    department_id: number;
    position_level: string;
    position_category: string;
    min_salary: number;
    max_salary: number;
    min_hourly_rate: number;
    max_hourly_rate: number;
    required_qualifications: string;
    required_certifications: string;
    preferred_qualifications: string;
    responsibilities: string;
    physical_requirements: string;
    requires_license: number;
    license_types: string;
    authorized_count: number;
    filled_count: number;
    is_active: number;
    created_at: Date;
    updated_at: Date;
    department: Department;
    employee_profiles: EmployeeProfile[];
}
export declare class ScheduleTemplate {
    id: number;
    uuid: string;
    template_name: string;
    template_description: string;
    department_id: number;
    template_type: string;
    schedule_pattern: string;
    pattern_length_days: number;
    standard_shift_hours: number;
    default_start_time: string;
    default_end_time: string;
    includes_weekends: number;
    includes_holidays: number;
    staffing_requirements: string;
    is_active: number;
    created_by: number;
    created_at: Date;
    updated_at: Date;
    department: Department;
    creator: User;
    schedule_assignments: ScheduleAssignment[];
}
export declare class ScheduleAssignment {
    id: number;
    uuid: string;
    employee_profile_id: number;
    schedule_template_id: number;
    department_id: number;
    shift_date: Date;
    shift_type: string;
    scheduled_start_time: string;
    scheduled_end_time: string;
    scheduled_hours: number;
    assignment_status: string;
    location: string;
    unit_assignment: string;
    special_instructions: string;
    requires_coverage: number;
    coverage_employee_id: number;
    coverage_reason: string;
    assigned_by: number;
    assignment_date: Date;
    approved_by: number;
    approval_date: Date;
    notes: string;
    created_at: Date;
    updated_at: Date;
    employee_profile: EmployeeProfile;
    schedule_template: ScheduleTemplate;
    department: Department;
    coverage_employee: EmployeeProfile;
    assigner: User;
    approver: User;
}
export declare class TimeEntry {
    id: number;
    uuid: string;
    employee_profile_id: number;
    department_id: number;
    entry_date: Date;
    entry_type: string;
    clock_in_time: Date;
    clock_out_time: Date;
    break_start_time: Date;
    break_end_time: Date;
    regular_hours: number;
    overtime_hours: number;
    break_hours: number;
    total_hours: number;
    pay_period: string;
    approval_status: string;
    approved_by: number;
    approval_date: Date;
    approval_notes: string;
    clock_in_location: string;
    clock_out_location: string;
    time_entry_method: string;
    is_edited: number;
    edit_reason: string;
    edited_by: number;
    edit_date: Date;
    created_at: Date;
    updated_at: Date;
    employee_profile: EmployeeProfile;
    department: Department;
    approver: User;
    editor: User;
}
export declare class CredentialTracking {
    id: number;
    uuid: string;
    employee_profile_id: number;
    credential_type: string;
    credential_name: string;
    credential_number: string;
    issuing_organization: string;
    issue_date: Date;
    expiration_date: Date;
    credential_status: string;
    is_required: number;
    is_verified: number;
    verified_by: number;
    verification_date: Date;
    verification_method: string;
    verification_notes: string;
    document_path: string;
    renewal_notification_days: number;
    last_notification_sent: Date;
    continuing_education_requirements: string;
    ce_hours_required: number;
    ce_hours_completed: number;
    created_at: Date;
    updated_at: Date;
    employee_profile: EmployeeProfile;
    verifier: User;
}
export declare class TimeOffRequest {
    id: number;
    uuid: string;
    employee_profile_id: number;
    request_type: string;
    start_date: Date;
    end_date: Date;
    start_time: string;
    end_time: string;
    hours_requested: number;
    request_status: string;
    reason: string;
    submission_date: Date;
    approved_by: number;
    approval_date: Date;
    approval_notes: string;
    is_paid: number;
    available_balance: number;
    balance_after_request: number;
    requires_coverage: number;
    coverage_arranged_by: number;
    coverage_notes: string;
    created_at: Date;
    updated_at: Date;
    employee_profile: EmployeeProfile;
    approver: User;
    coverage_arranger: User;
}
