import { User, Facility } from './facility-provider.entity';
export declare class RegulatoryRequirement {
    id: number;
    uuid: string;
    requirement_name: string;
    regulatory_body: string;
    requirement_category: string;
    compliance_status: string;
    effective_date: Date;
    review_frequency: string;
    priority_level: string;
    applicability_scope: string;
    enforcement_level: string;
    risk_category: string;
    requirement_identifier: string;
    requirement_description: string;
    compliance_criteria: string;
    implementation_guidance: string;
    documentation_requirements: string;
    monitoring_procedures: string;
    assessment_methods: string;
    corrective_actions: string;
    preventive_measures: string;
    training_requirements: string;
    responsible_parties: string;
    resource_requirements: string;
    technology_systems: string;
    related_regulations: string;
    penalty_structure: string;
    appeals_process: string;
    exemption_criteria: string;
    interpretive_guidance: string;
    best_practices: string;
    implementation_timeline: string;
    compliance_monitoring: string;
    performance_indicators: string;
    next_review_date: Date;
    last_update_date: Date;
    created_at: Date;
    updated_at: Date;
    compliance_assessments: ComplianceAssessment[];
    compliance_audits: ComplianceAudit[];
}
export declare class ComplianceAssessment {
    id: number;
    uuid: string;
    regulatory_requirement_id: number;
    facility_id: number;
    assessment_date: Date;
    assessment_type: string;
    compliance_status: string;
    assessment_scope: string;
    risk_level: string;
    assessor_id: number;
    follow_up_required: boolean;
    completion_status: string;
    assessment_title: string;
    assessment_purpose: string;
    assessment_methodology: string;
    assessment_criteria: string;
    evidence_reviewed: string;
    interviews_conducted: string;
    observations_made: string;
    documentation_reviewed: string;
    system_testing: string;
    compliance_findings: string;
    non_compliance_issues: string;
    recommendations: string;
    corrective_action_plan: string;
    risk_assessment: string;
    mitigation_strategies: string;
    best_practices_identified: string;
    improvement_opportunities: string;
    resource_implications: string;
    stakeholder_feedback: string;
    follow_up_actions: string;
    communication_plan: string;
    overall_compliance_score: number;
    risk_score: number;
    findings_count: number;
    critical_findings: number;
    major_findings: number;
    minor_findings: number;
    next_assessment_date: Date;
    corrective_action_deadline: Date;
    created_at: Date;
    updated_at: Date;
    regulatory_requirement: RegulatoryRequirement;
    facility: Facility;
    assessor: User;
}
export declare class ComplianceAudit {
    id: number;
    uuid: string;
    regulatory_requirement_id: number;
    facility_id: number;
    audit_date: Date;
    audit_type: string;
    audit_status: string;
    audit_scope: string;
    auditor_organization: string;
    compliance_rating: string;
    risk_level: string;
    follow_up_required: boolean;
    audit_title: string;
    audit_objectives: string;
    audit_methodology: string;
    audit_criteria: string;
    audit_team: string;
    audit_schedule: string;
    areas_audited: string;
    evidence_collected: string;
    sampling_methodology: string;
    testing_procedures: string;
    audit_findings: string;
    compliance_strengths: string;
    deficiencies_identified: string;
    violations_noted: string;
    recommendations: string;
    management_response: string;
    corrective_action_plan: string;
    implementation_timeline: string;
    resource_requirements: string;
    risk_assessment: string;
    impact_analysis: string;
    monitoring_plan: string;
    lessons_learned: string;
    best_practices: string;
    overall_audit_score: number;
    total_findings: number;
    critical_findings: number;
    significant_findings: number;
    moderate_findings: number;
    minor_findings: number;
    report_issued_date: Date;
    response_due_date: Date;
    follow_up_date: Date;
    created_at: Date;
    updated_at: Date;
    regulatory_requirement: RegulatoryRequirement;
    facility: Facility;
}
export declare class PolicyManagement {
    id: number;
    uuid: string;
    facility_id: number;
    policy_name: string;
    policy_category: string;
    policy_status: string;
    effective_date: Date;
    review_date: Date;
    approval_status: string;
    compliance_requirement: string;
    policy_owner: number;
    version_number: string;
    policy_identifier: string;
    policy_purpose: string;
    policy_scope: string;
    policy_statement: string;
    policy_procedures: string;
    roles_responsibilities: string;
    compliance_requirements: string;
    monitoring_procedures: string;
    training_requirements: string;
    documentation_requirements: string;
    performance_indicators: string;
    quality_assurance: string;
    risk_management: string;
    related_policies: string;
    regulatory_references: string;
    supporting_documents: string;
    approval_workflow: string;
    revision_history: string;
    implementation_plan: string;
    communication_plan: string;
    feedback_mechanism: string;
    exceptions_process: string;
    appeals_process: string;
    last_reviewed_date: Date;
    next_review_date: Date;
    retirement_date: Date;
    created_at: Date;
    updated_at: Date;
    facility: Facility;
    owner: User;
}
export declare class AccreditationManagement {
    id: number;
    uuid: string;
    facility_id: number;
    accrediting_body: string;
    accreditation_type: string;
    accreditation_status: string;
    current_cycle_start: Date;
    expiration_date: Date;
    readiness_level: string;
    compliance_score: number;
    risk_level: string;
    survey_type: string;
    accreditation_program: string;
    accreditation_scope: string;
    standards_framework: string;
    preparation_status: string;
    readiness_assessment: string;
    gap_analysis: string;
    improvement_plan: string;
    mock_survey_results: string;
    training_plan: string;
    documentation_review: string;
    policy_alignment: string;
    staff_competency: string;
    quality_indicators: string;
    patient_safety_data: string;
    performance_improvement: string;
    environment_safety: string;
    infection_control: string;
    medication_management: string;
    information_management: string;
    leadership_governance: string;
    human_resources: string;
    survey_preparation: string;
    contingency_planning: string;
    last_survey_date: Date;
    next_survey_date: Date;
    preparation_start_date: Date;
    created_at: Date;
    updated_at: Date;
    facility: Facility;
}
export declare class HealthcareComplianceRegulatoryQualityMetrics {
    id: number;
    uuid: string;
    reporting_period: Date;
    facility_id: number;
    compliance_domain: string;
    regulatory_framework: string;
    compliance_status: string;
    risk_level: string;
    audit_frequency: string;
    performance_rating: string;
    total_requirements: number;
    compliant_requirements: number;
    compliance_rate: number;
    regulatory_compliance_score: number;
    active_policies: number;
    policies_due_review: number;
    policy_compliance_rate: number;
    compliance_assessments: number;
    assessment_compliance_score: number;
    audit_findings: number;
    critical_findings: number;
    findings_resolved: number;
    finding_resolution_rate: number;
    corrective_actions_open: number;
    corrective_actions_overdue: number;
    corrective_action_timeliness: number;
    compliance_investment: number;
    penalty_avoidance_value: number;
    compliance_roi: number;
    compliance_trends: string;
    risk_assessment: string;
    improvement_initiatives: string;
    regulatory_changes: string;
    training_effectiveness: string;
    technology_utilization: string;
    stakeholder_engagement: string;
    best_practices: string;
    continuous_monitoring: string;
    created_at: Date;
    updated_at: Date;
    facility: Facility;
}
